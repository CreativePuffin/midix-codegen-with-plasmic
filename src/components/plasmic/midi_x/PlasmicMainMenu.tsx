// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kJshciSJnYYFfXZkFQ39on
// Component: NK-nIR9-HV
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MainMenuItem from "../../MainMenuItem"; // plasmic-import: _MP3tO9_wf/component
import Button from "../../Button"; // plasmic-import: t_0Z-tS1oOM/component

import { useScreenVariants as useScreenVariantsq351NNxhIiU } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Q35_1NNxh_IiU/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_midi_x.module.css"; // plasmic-import: kJshciSJnYYFfXZkFQ39on/projectcss
import sty from "./PlasmicMainMenu.module.css"; // plasmic-import: NK-nIR9-HV/css

import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: ThX7Zo7yQv/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: dZlb7SIaoZ/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 8-aKz_yM1IT/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: LPwNS5ZgtbG/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: Oq_IxxqAcw/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: -kqp2bUgPx/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: yJFzqf9nY_/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: DPjKooRGG7/icon
import midixMerkipngIwM4I9AWq from "./images/midixMerkipng.png"; // plasmic-import: IwM4I9aWq/picture

export type PlasmicMainMenu__VariantMembers = {};
export type PlasmicMainMenu__VariantsArgs = {};
type VariantPropType = keyof PlasmicMainMenu__VariantsArgs;
export const PlasmicMainMenu__VariantProps = new Array<VariantPropType>();

export type PlasmicMainMenu__ArgsType = {};
type ArgPropType = keyof PlasmicMainMenu__ArgsType;
export const PlasmicMainMenu__ArgProps = new Array<ArgPropType>();

export type PlasmicMainMenu__OverridesType = {
  wrapper?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultMainMenuProps {
  className?: string;
}

function PlasmicMainMenu__RenderFunc(props: {
  variants: PlasmicMainMenu__VariantsArgs;
  args: PlasmicMainMenu__ArgsType;
  overrides: PlasmicMainMenu__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsq351NNxhIiU()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"wrapper"}
      data-plasmic-override={overrides.wrapper}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.wrapper
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__mva6N)}
      >
        <MainMenuItem
          className={classNames("__wab_instance", sty.mainMenuItem__pht2V)}
          link={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? `/vidburdir`
              : undefined
          }
          slot={
            <Icon4Icon
              className={classNames(projectcss.all, sty.svg__m4Kko)}
              role={"img"}
            />
          }
          subitems={null}
        />

        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <div className={classNames(projectcss.all, sty.freeBox__zfcwq)} />
        ) : null}

        <MainMenuItem
          className={classNames("__wab_instance", sty.mainMenuItem__vhAYl)}
          link={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? `/vidburdir`
              : undefined
          }
          showItems={
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          }
          slot={
            <Icon13Icon
              className={classNames(projectcss.all, sty.svg__gZlwk)}
              role={"img"}
            />
          }
          subitems={
            <React.Fragment>
              <Button
                className={classNames("__wab_instance", sty.button__g4AcS)}
                color={"link" as const}
                size={"zero" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__e6Gat
                  )}
                >
                  {"Íþrottir"}
                </div>
              </Button>

              <Button
                className={classNames("__wab_instance", sty.button__ivkO3)}
                color={"link" as const}
                size={"zero" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qpruv
                  )}
                >
                  {"Hátíðir"}
                </div>
              </Button>
            </React.Fragment>
          }
        >
          {"Viðburðir"}
        </MainMenuItem>

        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <div className={classNames(projectcss.all, sty.freeBox__eljy1)} />
        ) : null}

        <MainMenuItem
          className={classNames("__wab_instance", sty.mainMenuItem__kLxVa)}
          link={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? `/vidburdir`
              : undefined
          }
          showItems={
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          }
          slot={
            <Icon16Icon
              className={classNames(projectcss.all, sty.svg__xb8Mx)}
              role={"img"}
            />
          }
          subitems={
            <React.Fragment>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <Button
                  className={classNames("__wab_instance", sty.button__oq4Mp)}
                  color={"link" as const}
                  size={"zero" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__n0IL
                    )}
                  >
                    {"Leikhús"}
                  </div>
                </Button>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <Button
                  className={classNames("__wab_instance", sty.button__dsLyg)}
                  color={"link" as const}
                  size={"zero" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hJ0Oq
                    )}
                  >
                    {"Bío"}
                  </div>
                </Button>
              ) : null}
            </React.Fragment>
          }
        >
          {"Sýningar"}
        </MainMenuItem>

        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <div className={classNames(projectcss.all, sty.freeBox__kxh1)} />
        ) : null}

        <MainMenuItem
          className={classNames("__wab_instance", sty.mainMenuItem__kmizi)}
          showItems={
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          }
          slot={
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("32px" as const)
                  : ("48px" as const)
              }
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: midixMerkipngIwM4I9AWq,
                fullWidth: 349,
                fullHeight: 340,
                aspectRatio: undefined
              }}
            />
          }
          subitems={
            <React.Fragment>
              <Button
                className={classNames("__wab_instance", sty.button___0LrkD)}
                color={"link" as const}
                size={"zero" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bEh1
                  )}
                >
                  {"Um okkur"}
                </div>
              </Button>

              <Button
                className={classNames("__wab_instance", sty.button___0Q5R)}
                color={"link" as const}
                size={"zero" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iDrx3
                  )}
                >
                  {"Spurt & Svarað"}
                </div>
              </Button>

              <Button
                className={classNames("__wab_instance", sty.button__iqR6B)}
                color={"link" as const}
                size={"zero" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__i2OdL
                  )}
                >
                  {"Viðskiptaskilmálar"}
                </div>
              </Button>

              <Button
                className={classNames("__wab_instance", sty.button__dLvLp)}
                color={"link" as const}
                size={"zero" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zXuO
                  )}
                >
                  {"Persónuverndastefna"}
                </div>
              </Button>
            </React.Fragment>
          }
        >
          {"MiðiX"}
        </MainMenuItem>
      </p.Stack>

      <div className={classNames(projectcss.all, sty.freeBox__pHq4Z)}>
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__r8Bnn)}
          >
            <Button
              className={classNames("__wab_instance", sty.button__pzcFg)}
              color={"whitePop" as const}
              link={"tel:5678004" as const}
              shape={"rounded" as const}
              showStartIcon={true}
              startIcon={
                <Icon7Icon
                  className={classNames(projectcss.all, sty.svg___7Vd1Z)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nocAv
                )}
              >
                {"567 8004"}
              </div>
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button___8YZi2)}
              color={"whitePop" as const}
              link={"tel:5678004" as const}
              shape={"rounded" as const}
              showStartIcon={true}
              startIcon={
                <Icon8Icon
                  className={classNames(projectcss.all, sty.svg___3WDad)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__e8L2A
                )}
              >
                {"midar@midix.is "}
              </div>
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__d6Yxh)}
              color={"whitePop" as const}
              link={"tel:5678004" as const}
              shape={"rounded" as const}
              showStartIcon={true}
              startIcon={
                <Icon19Icon
                  className={classNames(projectcss.all, sty.svg___9QFzw)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cuKcc
                )}
              >
                {"Spjallið"}
              </div>
            </Button>
          </p.Stack>
        ) : null}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  wrapper: ["wrapper", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  wrapper: "div";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMainMenu__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMainMenu__VariantsArgs;
    args?: PlasmicMainMenu__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMainMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMainMenu__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMainMenu__ArgProps,
          internalVariantPropNames: PlasmicMainMenu__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicMainMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "wrapper") {
    func.displayName = "PlasmicMainMenu";
  } else {
    func.displayName = `PlasmicMainMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicMainMenu = Object.assign(
  // Top-level PlasmicMainMenu renders the root element
  makeNodeComponent("wrapper"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicMainMenu
    internalVariantProps: PlasmicMainMenu__VariantProps,
    internalArgProps: PlasmicMainMenu__ArgProps
  }
);

export default PlasmicMainMenu;
/* prettier-ignore-end */
