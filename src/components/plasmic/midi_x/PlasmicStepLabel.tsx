// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kJshciSJnYYFfXZkFQ39on
// Component: L6wHNgu9QA
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_midi_x.module.css"; // plasmic-import: kJshciSJnYYFfXZkFQ39on/projectcss
import sty from "./PlasmicStepLabel.module.css"; // plasmic-import: L6wHNgu9QA/css

export type PlasmicStepLabel__VariantMembers = {
  selected: "selected";
};
export type PlasmicStepLabel__VariantsArgs = {
  selected?: SingleBooleanChoiceArg<"selected">;
};
type VariantPropType = keyof PlasmicStepLabel__VariantsArgs;
export const PlasmicStepLabel__VariantProps = new Array<VariantPropType>(
  "selected"
);

export type PlasmicStepLabel__ArgsType = {
  eventTitle5?: React.ReactNode;
  eventTitle4?: React.ReactNode;
};
type ArgPropType = keyof PlasmicStepLabel__ArgsType;
export const PlasmicStepLabel__ArgProps = new Array<ArgPropType>(
  "eventTitle5",
  "eventTitle4"
);

export type PlasmicStepLabel__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultStepLabelProps {
  eventTitle5?: React.ReactNode;
  eventTitle4?: React.ReactNode;
  selected?: SingleBooleanChoiceArg<"selected">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    await promise;
  });

function PlasmicStepLabel__RenderFunc(props: {
  variants: PlasmicStepLabel__VariantsArgs;
  args: PlasmicStepLabel__ArgsType;
  overrides: PlasmicStepLabel__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "selected",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.selected
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
          { [sty.rootselected]: hasVariant($state, "selected", "selected") }
        )}
      >
        <h2
          className={classNames(projectcss.all, projectcss.h2, sty.h2__aJcxR, {
            [sty.h2selected__aJcxRCqzL2]: hasVariant(
              $state,
              "selected",
              "selected"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "1",
            value: args.eventTitle5,
            className: classNames(sty.slotTargetEventTitle5, {
              [sty.slotTargetEventTitle5selected]: hasVariant(
                $state,
                "selected",
                "selected"
              )
            })
          })}
        </h2>

        <h2
          className={classNames(projectcss.all, projectcss.h2, sty.h2__t2M4U)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Velja mi√∞a",
            value: args.eventTitle4,
            className: classNames(sty.slotTargetEventTitle4, {
              [sty.slotTargetEventTitle4selected]: hasVariant(
                $state,
                "selected",
                "selected"
              )
            })
          })}
        </h2>
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStepLabel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStepLabel__VariantsArgs;
    args?: PlasmicStepLabel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStepLabel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicStepLabel__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicStepLabel__ArgProps,
          internalVariantPropNames: PlasmicStepLabel__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicStepLabel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStepLabel";
  } else {
    func.displayName = `PlasmicStepLabel.${nodeName}`;
  }
  return func;
}

export const PlasmicStepLabel = Object.assign(
  // Top-level PlasmicStepLabel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicStepLabel
    internalVariantProps: PlasmicStepLabel__VariantProps,
    internalArgProps: PlasmicStepLabel__ArgProps
  }
);

export default PlasmicStepLabel;
/* prettier-ignore-end */
