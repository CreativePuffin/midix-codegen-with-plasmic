// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kJshciSJnYYFfXZkFQ39on
// Component: _MP3tO9_wf
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: t_0Z-tS1oOM/component

import { useScreenVariants as useScreenVariantsq351NNxhIiU } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Q35_1NNxh_IiU/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_midi_x.module.css"; // plasmic-import: kJshciSJnYYFfXZkFQ39on/projectcss
import sty from "./PlasmicMainMenuItem.module.css"; // plasmic-import: _MP3tO9_wf/css

import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: ThX7Zo7yQv/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 8-aKz_yM1IT/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: LPwNS5ZgtbG/icon

export type PlasmicMainMenuItem__VariantMembers = {
  showItems: "showItems";
};
export type PlasmicMainMenuItem__VariantsArgs = {
  showItems?: SingleBooleanChoiceArg<"showItems">;
};
type VariantPropType = keyof PlasmicMainMenuItem__VariantsArgs;
export const PlasmicMainMenuItem__VariantProps = new Array<VariantPropType>(
  "showItems"
);

export type PlasmicMainMenuItem__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  subitems?: React.ReactNode;
  link?: string;
};
type ArgPropType = keyof PlasmicMainMenuItem__ArgsType;
export const PlasmicMainMenuItem__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "subitems",
  "link"
);

export type PlasmicMainMenuItem__OverridesType = {
  wrapper?: p.Flex<"div">;
  link?: p.Flex<"a">;
};

export interface DefaultMainMenuItemProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  subitems?: React.ReactNode;
  link?: string;
  showItems?: SingleBooleanChoiceArg<"showItems">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    await promise;
  });

function PlasmicMainMenuItem__RenderFunc(props: {
  variants: PlasmicMainMenuItem__VariantsArgs;
  args: PlasmicMainMenuItem__ArgsType;
  overrides: PlasmicMainMenuItem__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "showItems",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.showItems
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  const [isWrapperHover, triggerWrapperHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_wrapper: isWrapperHover
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsq351NNxhIiU()
  });

  return (
    <div
      data-plasmic-name={"wrapper"}
      data-plasmic-override={overrides.wrapper}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.wrapper,
        { [sty.wrappershowItems]: hasVariant($state, "showItems", "showItems") }
      )}
      data-plasmic-trigger-props={[triggerWrapperHoverProps]}
    >
      <p.Stack
        as={"a"}
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        hasGap={true}
        className={classNames(projectcss.all, projectcss.a, sty.link, {
          [sty.linkshowItems]: hasVariant($state, "showItems", "showItems")
        })}
        href={args.link}
      >
        {(triggers.hover_wrapper ? true : true) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hc1Bd)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zElt7)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__smHOo)}
                      role={"img"}
                    />
                  ),

                  value: args.slot,
                  className: classNames(sty.slotTargetSlot)
                })}
                {p.renderPlasmicSlot({
                  defaultContents: "TÃ³nleikar",
                  value: args.children,
                  className: classNames(sty.slotTargetChildren)
                })}
              </p.Stack>
            ) : null}
            {(hasVariant($state, "showItems", "showItems") ? true : true) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ounid, {
                  [sty.freeBoxshowItems__ounidnty6I]: hasVariant(
                    $state,
                    "showItems",
                    "showItems"
                  )
                })}
              >
                {true
                  ? p.renderPlasmicSlot({
                      defaultContents: (
                        <React.Fragment>
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button___12Sef
                            )}
                            color={"link" as const}
                            size={"zero" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__afszk
                              )}
                            >
                              {"Link"}
                            </div>
                          </Button>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__vM9Uw
                            )}
                            color={"link" as const}
                            size={"zero" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___7TyW7
                              )}
                            >
                              {"Link"}
                            </div>
                          </Button>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__ieRbO
                            )}
                            color={"link" as const}
                            size={"zero" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ajwyl
                              )}
                            >
                              {"Link"}
                            </div>
                          </Button>
                        </React.Fragment>
                      ),
                      value: args.subitems,
                      className: classNames(sty.slotTargetSubitems)
                    })
                  : null}
              </p.Stack>
            ) : null}
          </p.Stack>
        ) : null}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  wrapper: ["wrapper", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  wrapper: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMainMenuItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMainMenuItem__VariantsArgs;
    args?: PlasmicMainMenuItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMainMenuItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMainMenuItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMainMenuItem__ArgProps,
          internalVariantPropNames: PlasmicMainMenuItem__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicMainMenuItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "wrapper") {
    func.displayName = "PlasmicMainMenuItem";
  } else {
    func.displayName = `PlasmicMainMenuItem.${nodeName}`;
  }
  return func;
}

export const PlasmicMainMenuItem = Object.assign(
  // Top-level PlasmicMainMenuItem renders the root element
  makeNodeComponent("wrapper"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicMainMenuItem
    internalVariantProps: PlasmicMainMenuItem__VariantProps,
    internalArgProps: PlasmicMainMenuItem__ArgProps
  }
);

export default PlasmicMainMenuItem;
/* prettier-ignore-end */
