// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kJshciSJnYYFfXZkFQ39on
// Component: l0A0ozTXtP
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: W4rdttX1TF/component
import Button from "../../Button"; // plasmic-import: t_0Z-tS1oOM/component

import { useScreenVariants as useScreenVariantsq351NNxhIiU } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Q35_1NNxh_IiU/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_midi_x.module.css"; // plasmic-import: kJshciSJnYYFfXZkFQ39on/projectcss
import sty from "./PlasmicEventsevent.module.css"; // plasmic-import: l0A0ozTXtP/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: a4AtesqE6S/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: r5cn7eC_vQ/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: LPwNS5ZgtbG/icon
import image3CbJJejSc8 from "./images/image3.png"; // plasmic-import: cbJJejSc8/picture

export type PlasmicEventsevent__VariantMembers = {};
export type PlasmicEventsevent__VariantsArgs = {};
type VariantPropType = keyof PlasmicEventsevent__VariantsArgs;
export const PlasmicEventsevent__VariantProps = new Array<VariantPropType>();

export type PlasmicEventsevent__ArgsType = {
  eventTitle?: React.ReactNode;
  children13?: React.ReactNode;
  children14?: React.ReactNode;
};
type ArgPropType = keyof PlasmicEventsevent__ArgsType;
export const PlasmicEventsevent__ArgProps = new Array<ArgPropType>(
  "eventTitle",
  "children13",
  "children14"
);

export type PlasmicEventsevent__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  imageLayers?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  descriptionBox?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  eventDate7?: p.Flex<"div">;
  eventLocation8?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultEventseventProps {
  eventTitle?: React.ReactNode;
  children13?: React.ReactNode;
  children14?: React.ReactNode;
  className?: string;
}

function PlasmicEventsevent__RenderFunc(props: {
  variants: PlasmicEventsevent__VariantsArgs;
  args: PlasmicEventsevent__ArgsType;
  overrides: PlasmicEventsevent__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsq351NNxhIiU()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__xEyXe)}>
            <div className={classNames(projectcss.all, sty.freeBox___95Hzc)}>
              <div
                data-plasmic-name={"imageLayers"}
                data-plasmic-override={overrides.imageLayers}
                className={classNames(projectcss.all, sty.imageLayers)}
              >
                <p.PlasmicImg
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: image3CbJJejSc8,
                    fullWidth: 1170,
                    fullHeight: 475,
                    aspectRatio: undefined
                  }}
                />
              </div>

              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"descriptionBox"}
                  data-plasmic-override={overrides.descriptionBox}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.descriptionBox)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__uWjRo)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6Eico
                        )}
                      >
                        <h2
                          data-plasmic-name={"h2"}
                          data-plasmic-override={overrides.h2}
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            sty.h2
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "Eyþór Ingi - Hátíðartónleikar",
                            value: args.eventTitle,
                            className: classNames(sty.slotTargetEventTitle)
                          })}
                        </h2>
                      </div>
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xVw2A
                      )}
                    >
                      {
                        "Hátíðartónleikar Eyþórs hafa fengið frábærar viðtökur um land allt síðustu ár. \n\nHér er á ferðinni létt og jólaleg kvöldstund þar sem Eyþór Ingi kemur fram með húmorinn  píanóið og gítarinn að vopni ásamt piano snillingnum og hæfileikasprengjuni Þórði Sigurðarsyni.\n\nHátíðartónleikar Eyþórs Inga einkennast af einstakri blöndu hugljúfra tóna,  gríni og jafnvel eftirhermum. Það er klárt mál að ADHD hefur aldrei verið skemmtilegra.\n\nSíðast seldist upp hratt og færri komust að en vildu."
                      }
                    </div>
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__iOdQ)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.freeBox__lH2)}
                      >
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qQlS2
                            )}
                          >
                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__tlJk
                                )}
                              >
                                {true ? (
                                  <p.Stack
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__mTekv
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"eventDate7"}
                                      data-plasmic-override={
                                        overrides.eventDate7
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.eventDate7
                                      )}
                                    >
                                      {p.renderPlasmicSlot({
                                        defaultContents: (
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__dhEZk
                                            )}
                                          >
                                            {"2.desember - 3. desember"}
                                          </div>
                                        ),

                                        value: args.children13,
                                        className: classNames(
                                          sty.slotTargetChildren13
                                        )
                                      })}
                                    </div>
                                  </p.Stack>
                                ) : null}
                                {true ? (
                                  <p.Stack
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__quoCr
                                    )}
                                  >
                                    <IconIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__asu6A
                                      )}
                                      role={"img"}
                                    />

                                    <p.Stack
                                      as={"div"}
                                      data-plasmic-name={"eventLocation8"}
                                      data-plasmic-override={
                                        overrides.eventLocation8
                                      }
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.eventLocation8
                                      )}
                                    >
                                      {p.renderPlasmicSlot({
                                        defaultContents: (
                                          <React.Fragment>
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__gxUg7
                                              )}
                                            >
                                              {"Selfoss"}
                                            </div>

                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__p6XPo
                                              )}
                                            >
                                              {"|"}
                                            </div>

                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text___3Bq94
                                              )}
                                            >
                                              {"Reykjavík"}
                                            </div>
                                          </React.Fragment>
                                        ),
                                        value: args.children14,
                                        className: classNames(
                                          sty.slotTargetChildren14
                                        )
                                      })}
                                    </p.Stack>
                                  </p.Stack>
                                ) : null}
                              </p.Stack>
                            ) : null}
                          </p.Stack>
                        ) : null}
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__hnBa
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mRq02
                              )}
                            >
                              {"5.000 - 8.000 kr."}
                            </div>

                            <Button
                              data-plasmic-name={"button"}
                              data-plasmic-override={overrides.button}
                              className={classNames(
                                "__wab_instance",
                                sty.button
                              )}
                              color={"yellow" as const}
                              link={`/events/event/tickets`}
                              showEndIcon={true}
                              startIcon={
                                <Icon2Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__ldLN
                                  )}
                                  role={"img"}
                                />
                              }
                            >
                              {"Finna miða"}
                            </Button>
                          </p.Stack>
                        ) : null}
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                </p.Stack>
              ) : null}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "imageLayers",
    "img",
    "descriptionBox",
    "h2",
    "eventDate7",
    "eventLocation8",
    "button"
  ],
  navbar: ["navbar"],
  imageLayers: ["imageLayers", "img"],
  img: ["img"],
  descriptionBox: [
    "descriptionBox",
    "h2",
    "eventDate7",
    "eventLocation8",
    "button"
  ],
  h2: ["h2"],
  eventDate7: ["eventDate7"],
  eventLocation8: ["eventLocation8"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  imageLayers: "div";
  img: typeof p.PlasmicImg;
  descriptionBox: "div";
  h2: "h2";
  eventDate7: "div";
  eventLocation8: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEventsevent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEventsevent__VariantsArgs;
    args?: PlasmicEventsevent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEventsevent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEventsevent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicEventsevent__ArgProps,
          internalVariantPropNames: PlasmicEventsevent__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicEventsevent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEventsevent";
  } else {
    func.displayName = `PlasmicEventsevent.${nodeName}`;
  }
  return func;
}

export const PlasmicEventsevent = Object.assign(
  // Top-level PlasmicEventsevent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    imageLayers: makeNodeComponent("imageLayers"),
    img: makeNodeComponent("img"),
    descriptionBox: makeNodeComponent("descriptionBox"),
    h2: makeNodeComponent("h2"),
    eventDate7: makeNodeComponent("eventDate7"),
    eventLocation8: makeNodeComponent("eventLocation8"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicEventsevent
    internalVariantProps: PlasmicEventsevent__VariantProps,
    internalArgProps: PlasmicEventsevent__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEventsevent;
/* prettier-ignore-end */
