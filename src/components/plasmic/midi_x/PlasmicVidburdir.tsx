// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kJshciSJnYYFfXZkFQ39on
// Component: Vbe0R7LOWOi
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: W4rdttX1TF/component
import EventCard from "../../EventCard"; // plasmic-import: AyrTywh7_c/component
import { GraphqlFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: 0DrxdjD45dkx/codeComponent
import Footer from "../../Footer"; // plasmic-import: _fa5mVL2su/component

import { useScreenVariants as useScreenVariantsq351NNxhIiU } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Q35_1NNxh_IiU/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_midi_x.module.css"; // plasmic-import: kJshciSJnYYFfXZkFQ39on/projectcss
import sty from "./PlasmicVidburdir.module.css"; // plasmic-import: Vbe0R7LOWOi/css

import TicketSvgrepoComsvgIcon from "./icons/PlasmicIcon__TicketSvgrepoComsvg"; // plasmic-import: Rtg_kZ7nG9/icon
import PopcornMovieSvgrepoComsvgIcon from "./icons/PlasmicIcon__PopcornMovieSvgrepoComsvg"; // plasmic-import: NmwHWg7pBE/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: ThX7Zo7yQv/icon
import image6NkXg4SbQr from "./images/image6.png"; // plasmic-import: NKXg4SBQr/picture
import image4GpdXmTtWf from "./images/image4.png"; // plasmic-import: gpdXmTtWf/picture
import image8AeGTr3LEa from "./images/image8.png"; // plasmic-import: AeGTr3LEa/picture

export type PlasmicVidburdir__VariantMembers = {};
export type PlasmicVidburdir__VariantsArgs = {};
type VariantPropType = keyof PlasmicVidburdir__VariantsArgs;
export const PlasmicVidburdir__VariantProps = new Array<VariantPropType>();

export type PlasmicVidburdir__ArgsType = {
  query?: string;
};
type ArgPropType = keyof PlasmicVidburdir__ArgsType;
export const PlasmicVidburdir__ArgProps = new Array<ArgPropType>("query");

export type PlasmicVidburdir__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  monthOfEventSubLabel?: p.Flex<"div">;
  monthOfEventSubLabel2?: p.Flex<"div">;
  monthOfEventSubLabel3?: p.Flex<"div">;
  monthOfEventSubLabel4?: p.Flex<"div">;
  monthOfEventSubLabel5?: p.Flex<"div">;
  faunaQlFetcher?: p.Flex<typeof GraphqlFetcher>;
  monthOfEventSubLabel6?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultVidburdirProps {
  query?: string;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    await promise;
  });

function PlasmicVidburdir__RenderFunc(props: {
  variants: PlasmicVidburdir__VariantsArgs;
  args: PlasmicVidburdir__ArgsType;
  overrides: PlasmicVidburdir__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsq351NNxhIiU()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          {true ? (
            <p.Stack
              as={"section"}
              hasGap={true}
              className={classNames(projectcss.all, sty.section__xSiig)}
            />
          ) : null}

          <p.Stack
            as={"section"}
            hasGap={true}
            className={classNames(projectcss.all, sty.section___0A2Ku)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__dQrrc)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vcfP)}
                  >
                    <TicketSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__vAi6)}
                      role={"img"}
                    />
                  </div>
                ) : null}

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jhtrs
                  )}
                >
                  {"Viðburðir "}
                </div>
              </p.Stack>
            ) : null}

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ieAWg)}
            >
              <EventCard
                className={classNames("__wab_instance", sty.eventCard__olTXp)}
                dayOfEventSubLabel={"25"}
                eventTitle={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__c5YiG
                    )}
                  >
                    {"Níu líf - Leikhússýning"}
                  </div>
                }
                image={{
                  src: image6NkXg4SbQr,
                  fullWidth: 776,
                  fullHeight: 600,
                  aspectRatio: undefined
                }}
                link={`/events/event`}
                monthOfEventSubLabel={
                  <div
                    data-plasmic-name={"monthOfEventSubLabel"}
                    data-plasmic-override={overrides.monthOfEventSubLabel}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.monthOfEventSubLabel
                    )}
                  >
                    {"Nov"}
                  </div>
                }
                showHeader={true}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pQua2
                    )}
                  >
                    {"Föstudagur kl: 14:00"}
                  </div>
                }
              >
                {"Borgarleikhúsið - Reykjavík"}
              </EventCard>

              <EventCard
                className={classNames("__wab_instance", sty.eventCard__mWc1U)}
                eventTitle={"Eyþór Ingi - Hátíðartónleikar "}
                link={`/events/event`}
                showHeader={true}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__obrzK
                    )}
                  >
                    {"Þriðjudagur kl: 18:00"}
                  </div>
                }
              >
                {"Borgarnes"}
              </EventCard>

              <EventCard
                className={classNames("__wab_instance", sty.eventCard__xfnFh)}
                dayOfEventSubLabel={"11"}
                eventTitle={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__whhAj
                    )}
                  >
                    {"Jóhanna Guðrún - Jólatónleikar"}
                  </div>
                }
                image={{
                  src: image4GpdXmTtWf,
                  fullWidth: 3200,
                  fullHeight: 1000,
                  aspectRatio: undefined
                }}
                link={`/events/event`}
                priceLabel={"11.000 kr."}
                showHeader={true}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yuk8A
                    )}
                  >
                    {"Föstudagur kl 20:00"}
                  </div>
                }
              />

              <EventCard
                className={classNames("__wab_instance", sty.eventCard__hHtiz)}
                link={`/events/event`}
                showHeader={true}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vclRs
                    )}
                  >
                    {"Þriðjudagur"}
                  </div>
                }
              />
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            hasGap={true}
            className={classNames(projectcss.all, sty.section__qUUoi)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gBcNz)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ajtdH)}
                  >
                    <PopcornMovieSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__jlWdm)}
                      role={"img"}
                    />
                  </div>
                ) : null}

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pJj30
                  )}
                >
                  {"Sýningar"}
                </div>
              </p.Stack>
            ) : null}

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zfiS3)}
            >
              <EventCard
                className={classNames("__wab_instance", sty.eventCard__q1Ki)}
                eventTitle={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1Klpi
                    )}
                  >
                    {"Grænar lausnir - Sölu og þjónustusýning"}
                  </div>
                }
                image={{
                  src: image8AeGTr3LEa,
                  fullWidth: 284,
                  fullHeight: 199,
                  aspectRatio: undefined
                }}
                link={`/events/event`}
                monthOfEventSubLabel={
                  <div
                    data-plasmic-name={"monthOfEventSubLabel2"}
                    data-plasmic-override={overrides.monthOfEventSubLabel2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.monthOfEventSubLabel2
                    )}
                  >
                    {"Des"}
                  </div>
                }
                showHeader={true}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iHyTc
                    )}
                  >
                    {"Þriðjudagur kl: 14:00"}
                  </div>
                }
              >
                {"Laugardalshöll - Reykjavík"}
              </EventCard>

              <EventCard
                className={classNames("__wab_instance", sty.eventCard__iWBrE)}
                eventTitle={"Eyþór Ingi - Hátíðartónleikar "}
                link={`/events/event`}
                monthOfEventSubLabel={
                  <div
                    data-plasmic-name={"monthOfEventSubLabel3"}
                    data-plasmic-override={overrides.monthOfEventSubLabel3}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.monthOfEventSubLabel3
                    )}
                  >
                    {"Des"}
                  </div>
                }
                showHeader={true}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vs56M
                    )}
                  >
                    {"Þriðjudagur kl: 18:00"}
                  </div>
                }
              >
                {"Borgarnes"}
              </EventCard>

              <EventCard
                className={classNames("__wab_instance", sty.eventCard__utBbB)}
                dayOfEventSubLabel={"11"}
                eventTitle={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zE410
                    )}
                  >
                    {"Jóhanna Guðrún - Jólatónleikar"}
                  </div>
                }
                image={{
                  src: image4GpdXmTtWf,
                  fullWidth: 3200,
                  fullHeight: 1000,
                  aspectRatio: undefined
                }}
                link={`/events/event`}
                monthOfEventSubLabel={
                  <div
                    data-plasmic-name={"monthOfEventSubLabel4"}
                    data-plasmic-override={overrides.monthOfEventSubLabel4}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.monthOfEventSubLabel4
                    )}
                  >
                    {"Des"}
                  </div>
                }
                priceLabel={"11.000 kr."}
                showHeader={true}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vh3Gu
                    )}
                  >
                    {"Föstudagur kl 20:00"}
                  </div>
                }
              />

              <EventCard
                className={classNames("__wab_instance", sty.eventCard__ikDn9)}
                link={`/events/event`}
                monthOfEventSubLabel={
                  <div
                    data-plasmic-name={"monthOfEventSubLabel5"}
                    data-plasmic-override={overrides.monthOfEventSubLabel5}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.monthOfEventSubLabel5
                    )}
                  >
                    {"Des"}
                  </div>
                }
                showHeader={true}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uAbrq
                    )}
                  >
                    {"Þriðjudagur"}
                  </div>
                }
              />
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            hasGap={true}
            className={classNames(projectcss.all, sty.section__kjaYa)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ijpTw)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1RePg)}
                  >
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__dxnna)}
                      role={"img"}
                    />
                  </div>
                ) : null}

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___44Rjv
                  )}
                >
                  {"Tónleikar"}
                </div>
              </p.Stack>
            ) : null}

            <GraphqlFetcher
              data-plasmic-name={"faunaQlFetcher"}
              data-plasmic-override={overrides.faunaQlFetcher}
              className={classNames("__wab_instance", sty.faunaQlFetcher)}
              dataName={"fetchedData" as const}
              errorDisplay={
                <ph.DataCtxReader>
                  {$ctx => "Error fetching data"}
                </ph.DataCtxReader>
              }
              headers={{
                "Content-type": "application/json",
                Authorization: "Bearer fnAE17W1gAACS7VfyEyEitqYf1gDQP_82sDztcjz"
              }}
              loadingDisplay={
                <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
              }
              method={"POST" as const}
              noLayout={false}
              previewSpinner={false}
              query={{
                query:
                  "{\n  characters {\n    results {\n      name\n      species\n      image\n    }\n  }\n}\n"
              }}
              url={"https://graphql.eu.fauna.com/graphql" as const}
            >
              <ph.DataCtxReader>
                {$ctx => (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__qWuWj)}
                  >
                    {([2, 3, 4] ?? []).map((currentItem, currentIndex) => (
                      <EventCard
                        className={classNames(
                          "__wab_instance",
                          sty.eventCard__h0DF
                        )}
                        eventTitle={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__iCbln
                            )}
                          >
                            {"Grænar lausnir - Sölu og þjónustusýning"}
                          </div>
                        }
                        image={(() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return "https://site-assets.plasmic.app/f9523667c2c46cb513dfc6c3fd78ab77.png";
                            }
                            throw e;
                          }
                        })()}
                        key={currentIndex}
                        link={`/events/event`}
                        monthOfEventSubLabel={
                          <div
                            data-plasmic-name={"monthOfEventSubLabel6"}
                            data-plasmic-override={
                              overrides.monthOfEventSubLabel6
                            }
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.monthOfEventSubLabel6
                            )}
                          >
                            {"Des"}
                          </div>
                        }
                        showHeader={true}
                        slot={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___21Rnd
                            )}
                          >
                            {"Þriðjudagur kl: 14:00"}
                          </div>
                        }
                      >
                        {"Laugardalshöll - Reykjavík"}
                      </EventCard>
                    ))}
                  </p.Stack>
                )}
              </ph.DataCtxReader>
            </GraphqlFetcher>
          </p.Stack>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "monthOfEventSubLabel",
    "monthOfEventSubLabel2",
    "monthOfEventSubLabel3",
    "monthOfEventSubLabel4",
    "monthOfEventSubLabel5",
    "faunaQlFetcher",
    "monthOfEventSubLabel6",
    "footer"
  ],
  navbar: ["navbar"],
  monthOfEventSubLabel: ["monthOfEventSubLabel"],
  monthOfEventSubLabel2: ["monthOfEventSubLabel2"],
  monthOfEventSubLabel3: ["monthOfEventSubLabel3"],
  monthOfEventSubLabel4: ["monthOfEventSubLabel4"],
  monthOfEventSubLabel5: ["monthOfEventSubLabel5"],
  faunaQlFetcher: ["faunaQlFetcher", "monthOfEventSubLabel6"],
  monthOfEventSubLabel6: ["monthOfEventSubLabel6"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  monthOfEventSubLabel: "div";
  monthOfEventSubLabel2: "div";
  monthOfEventSubLabel3: "div";
  monthOfEventSubLabel4: "div";
  monthOfEventSubLabel5: "div";
  faunaQlFetcher: typeof GraphqlFetcher;
  monthOfEventSubLabel6: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVidburdir__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVidburdir__VariantsArgs;
    args?: PlasmicVidburdir__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicVidburdir__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicVidburdir__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicVidburdir__ArgProps,
          internalVariantPropNames: PlasmicVidburdir__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicVidburdir__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVidburdir";
  } else {
    func.displayName = `PlasmicVidburdir.${nodeName}`;
  }
  return func;
}

export const PlasmicVidburdir = Object.assign(
  // Top-level PlasmicVidburdir renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    monthOfEventSubLabel: makeNodeComponent("monthOfEventSubLabel"),
    monthOfEventSubLabel2: makeNodeComponent("monthOfEventSubLabel2"),
    monthOfEventSubLabel3: makeNodeComponent("monthOfEventSubLabel3"),
    monthOfEventSubLabel4: makeNodeComponent("monthOfEventSubLabel4"),
    monthOfEventSubLabel5: makeNodeComponent("monthOfEventSubLabel5"),
    faunaQlFetcher: makeNodeComponent("faunaQlFetcher"),
    monthOfEventSubLabel6: makeNodeComponent("monthOfEventSubLabel6"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicVidburdir
    internalVariantProps: PlasmicVidburdir__VariantProps,
    internalArgProps: PlasmicVidburdir__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Viðburðir",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicVidburdir;
/* prettier-ignore-end */
