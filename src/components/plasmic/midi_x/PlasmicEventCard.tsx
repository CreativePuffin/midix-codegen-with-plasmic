// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kJshciSJnYYFfXZkFQ39on
// Component: AyrTywh7_c
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: t_0Z-tS1oOM/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_midi_x.module.css"; // plasmic-import: kJshciSJnYYFfXZkFQ39on/projectcss
import sty from "./PlasmicEventCard.module.css"; // plasmic-import: AyrTywh7_c/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 8-aKz_yM1IT/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: LPwNS5ZgtbG/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: a4AtesqE6S/icon
import image3CbJJejSc8 from "./images/image3.png"; // plasmic-import: cbJJejSc8/picture

export type PlasmicEventCard__VariantMembers = {
  orentation: "orentation";
  size: "stretch";
  showHeader: "showHeader";
  hideCardInfo: "hideCardInfo";
};
export type PlasmicEventCard__VariantsArgs = {
  orentation?: SingleBooleanChoiceArg<"orentation">;
  size?: MultiChoiceArg<"stretch">;
  showHeader?: SingleBooleanChoiceArg<"showHeader">;
  hideCardInfo?: SingleBooleanChoiceArg<"hideCardInfo">;
};
type VariantPropType = keyof PlasmicEventCard__VariantsArgs;
export const PlasmicEventCard__VariantProps = new Array<VariantPropType>(
  "orentation",
  "size",
  "showHeader",
  "hideCardInfo"
);

export type PlasmicEventCard__ArgsType = {
  priceLabel?: React.ReactNode;
  dayOfEventSubLabel?: React.ReactNode;
  eventTitle?: React.ReactNode;
  image?: React.ComponentProps<typeof p.PlasmicImg>["src"];
  children?: React.ReactNode;
  slot?: React.ReactNode;
  monthOfEventSubLabel?: React.ReactNode;
  link?: string;
};
type ArgPropType = keyof PlasmicEventCard__ArgsType;
export const PlasmicEventCard__ArgProps = new Array<ArgPropType>(
  "priceLabel",
  "dayOfEventSubLabel",
  "eventTitle",
  "image",
  "children",
  "slot",
  "monthOfEventSubLabel",
  "link"
);

export type PlasmicEventCard__OverridesType = {
  wrapper?: p.Flex<"div">;
  linkWrapper?: p.Flex<"a">;
  header?: p.Flex<"div">;
  imageLayers?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  dateSubLabel?: p.Flex<"div">;
  priceSubLabel?: p.Flex<"div">;
  overlay?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
  text?: p.Flex<"div">;
  descriptionBox?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  eventLocation?: p.Flex<"div">;
};

export interface DefaultEventCardProps {
  priceLabel?: React.ReactNode;
  dayOfEventSubLabel?: React.ReactNode;
  eventTitle?: React.ReactNode;
  image?: React.ComponentProps<typeof p.PlasmicImg>["src"];
  children?: React.ReactNode;
  slot?: React.ReactNode;
  monthOfEventSubLabel?: React.ReactNode;
  link?: string;
  orentation?: SingleBooleanChoiceArg<"orentation">;
  size?: MultiChoiceArg<"stretch">;
  showHeader?: SingleBooleanChoiceArg<"showHeader">;
  hideCardInfo?: SingleBooleanChoiceArg<"hideCardInfo">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    await promise;
  });

function PlasmicEventCard__RenderFunc(props: {
  variants: PlasmicEventCard__VariantsArgs;
  args: PlasmicEventCard__ArgsType;
  overrides: PlasmicEventCard__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          image: {
            src: image3CbJJejSc8,
            fullWidth: 1170,
            fullHeight: 475,
            aspectRatio: undefined
          },
          link: `/events/event`
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "orentation",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.orentation
      },
      {
        path: "size",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.size
      },
      {
        path: "showHeader",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.showHeader
      },
      {
        path: "hideCardInfo",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.hideCardInfo
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  const [isWrapperHover, triggerWrapperHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_wrapper: isWrapperHover
  };

  return (
    true ? (
      <div
        data-plasmic-name={"wrapper"}
        data-plasmic-override={overrides.wrapper}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.wrapper,
          {
            [sty.wrapperorentation]: hasVariant(
              $state,
              "orentation",
              "orentation"
            ),
            [sty.wrappersize_stretch]: hasVariant($state, "size", "stretch")
          }
        )}
        data-plasmic-trigger-props={[triggerWrapperHoverProps]}
      >
        <a
          data-plasmic-name={"linkWrapper"}
          data-plasmic-override={overrides.linkWrapper}
          className={classNames(projectcss.all, projectcss.a, sty.linkWrapper, {
            [sty.linkWrapperorentation]: hasVariant(
              $state,
              "orentation",
              "orentation"
            ),
            [sty.linkWrappersize_stretch]: hasVariant($state, "size", "stretch")
          })}
          href={args.link}
        >
          {(hasVariant($state, "showHeader", "showHeader") ? true : true) ? (
            <div
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(projectcss.all, sty.header, {
                [sty.headershowHeader]: hasVariant(
                  $state,
                  "showHeader",
                  "showHeader"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Þriðjudagur",
                value: args.slot,
                className: classNames(sty.slotTargetSlot)
              })}
            </div>
          ) : null}

          <div
            data-plasmic-name={"imageLayers"}
            data-plasmic-override={overrides.imageLayers}
            className={classNames(projectcss.all, sty.imageLayers, {
              [sty.imageLayersorentation]: hasVariant(
                $state,
                "orentation",
                "orentation"
              ),
              [sty.imageLayerssize_stretch]: hasVariant(
                $state,
                "size",
                "stretch"
              )
            })}
          >
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img, {
                [sty.imgsize_stretch]: hasVariant($state, "size", "stretch")
              })}
              displayHeight={"100%" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100%" as const}
              loading={"lazy" as const}
              src={args.image}
            />

            {true ? (
              <div
                data-plasmic-name={"dateSubLabel"}
                data-plasmic-override={overrides.dateSubLabel}
                className={classNames(projectcss.all, sty.dateSubLabel, {
                  [sty.dateSubLabelsize_stretch]: hasVariant(
                    $state,
                    "size",
                    "stretch"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__shL3S, {
                    [sty.freeBoxorentation__shL3S19R9J]: hasVariant(
                      $state,
                      "orentation",
                      "orentation"
                    )
                  })}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "01 ",
                    value: args.dayOfEventSubLabel,
                    className: classNames(sty.slotTargetDayOfEventSubLabel, {
                      [sty.slotTargetDayOfEventSubLabelorentation]: hasVariant(
                        $state,
                        "orentation",
                        "orentation"
                      )
                    })
                  })}
                </div>

                <div
                  className={classNames(projectcss.all, sty.freeBox__bpWdl, {
                    [sty.freeBoxorentation__bpWdl19R9J]: hasVariant(
                      $state,
                      "orentation",
                      "orentation"
                    )
                  })}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fj9Lv
                        )}
                      >
                        {"Des"}
                      </div>
                    ),

                    value: args.monthOfEventSubLabel,
                    className: classNames(sty.slotTargetMonthOfEventSubLabel, {
                      [sty.slotTargetMonthOfEventSubLabelorentation]:
                        hasVariant($state, "orentation", "orentation")
                    })
                  })}
                </div>
              </div>
            ) : null}
            {(hasVariant($state, "orentation", "orentation") ? true : true) ? (
              <div
                data-plasmic-name={"priceSubLabel"}
                data-plasmic-override={overrides.priceSubLabel}
                className={classNames(projectcss.all, sty.priceSubLabel, {
                  [sty.priceSubLabelorentation]: hasVariant(
                    $state,
                    "orentation",
                    "orentation"
                  )
                })}
              >
                {(
                  hasVariant($state, "orentation", "orentation") ? true : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__s8UJo, {
                      [sty.freeBoxorentation__s8UJo19R9J]: hasVariant(
                        $state,
                        "orentation",
                        "orentation"
                      )
                    })}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "5.000 kr.",
                      value: args.priceLabel,
                      className: classNames(sty.slotTargetPriceLabel, {
                        [sty.slotTargetPriceLabelorentation]: hasVariant(
                          $state,
                          "orentation",
                          "orentation"
                        )
                      })
                    })}
                  </div>
                ) : null}
              </div>
            ) : null}
            {(triggers.hover_wrapper ? true : true) ? (
              <div
                data-plasmic-name={"overlay"}
                data-plasmic-override={overrides.overlay}
                className={classNames(projectcss.all, sty.overlay)}
              >
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={
                    triggers.hover_wrapper
                      ? ("link" as const)
                      : ("link" as const)
                  }
                  endIcon={
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg___2Jw0Y)}
                      role={"img"}
                    />
                  }
                  link={args.link}
                  showEndIcon={triggers.hover_wrapper ? true : true}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Kaupa miða"}
                  </div>
                </Button>
              </div>
            ) : null}
          </div>

          {(
            hasVariant($state, "hideCardInfo", "hideCardInfo") ? true : true
          ) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"descriptionBox"}
              data-plasmic-override={overrides.descriptionBox}
              hasGap={true}
              className={classNames(projectcss.all, sty.descriptionBox, {
                [sty.descriptionBoxhideCardInfo]: hasVariant(
                  $state,
                  "hideCardInfo",
                  "hideCardInfo"
                ),
                [sty.descriptionBoxorentation]: hasVariant(
                  $state,
                  "orentation",
                  "orentation"
                ),
                [sty.descriptionBoxsize_stretch]: hasVariant(
                  $state,
                  "size",
                  "stretch"
                )
              })}
            >
              <h2
                data-plasmic-name={"h2"}
                data-plasmic-override={overrides.h2}
                className={classNames(projectcss.all, projectcss.h2, sty.h2, {
                  [sty.h2orentation]: hasVariant(
                    $state,
                    "orentation",
                    "orentation"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "Eyþór Ingi - Hátíðartónleikar í Borgarnesi",
                  value: args.eventTitle,
                  className: classNames(sty.slotTargetEventTitle, {
                    [sty.slotTargetEventTitleorentation]: hasVariant(
                      $state,
                      "orentation",
                      "orentation"
                    ),
                    [sty.slotTargetEventTitlesize_stretch]: hasVariant(
                      $state,
                      "size",
                      "stretch"
                    )
                  })
                })}
              </h2>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__u2DAp, {
                    [sty.freeBoxorentation__u2DAp19R9J]: hasVariant(
                      $state,
                      "orentation",
                      "orentation"
                    ),
                    [sty.freeBoxsize_stretch__u2DApTa55D]: hasVariant(
                      $state,
                      "size",
                      "stretch"
                    )
                  })}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__uAdpl, {
                      [sty.svgsize_stretch__uAdplta55D]: hasVariant(
                        $state,
                        "size",
                        "stretch"
                      )
                    })}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={"eventLocation"}
                    data-plasmic-override={overrides.eventLocation}
                    className={classNames(projectcss.all, sty.eventLocation, {
                      [sty.eventLocationorentation]: hasVariant(
                        $state,
                        "orentation",
                        "orentation"
                      ),
                      [sty.eventLocationsize_stretch]: hasVariant(
                        $state,
                        "size",
                        "stretch"
                      )
                    })}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "Harpa, Reykjavík",
                      value: args.children,
                      className: classNames(sty.slotTargetChildren, {
                        [sty.slotTargetChildrenorentation]: hasVariant(
                          $state,
                          "orentation",
                          "orentation"
                        ),
                        [sty.slotTargetChildrensize_stretch]: hasVariant(
                          $state,
                          "size",
                          "stretch"
                        )
                      })
                    })}
                  </div>
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
        </a>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  wrapper: [
    "wrapper",
    "linkWrapper",
    "header",
    "imageLayers",
    "img",
    "dateSubLabel",
    "priceSubLabel",
    "overlay",
    "button",
    "text",
    "descriptionBox",
    "h2",
    "eventLocation"
  ],
  linkWrapper: [
    "linkWrapper",
    "header",
    "imageLayers",
    "img",
    "dateSubLabel",
    "priceSubLabel",
    "overlay",
    "button",
    "text",
    "descriptionBox",
    "h2",
    "eventLocation"
  ],
  header: ["header"],
  imageLayers: [
    "imageLayers",
    "img",
    "dateSubLabel",
    "priceSubLabel",
    "overlay",
    "button",
    "text"
  ],
  img: ["img"],
  dateSubLabel: ["dateSubLabel"],
  priceSubLabel: ["priceSubLabel"],
  overlay: ["overlay", "button", "text"],
  button: ["button", "text"],
  text: ["text"],
  descriptionBox: ["descriptionBox", "h2", "eventLocation"],
  h2: ["h2"],
  eventLocation: ["eventLocation"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  wrapper: "div";
  linkWrapper: "a";
  header: "div";
  imageLayers: "div";
  img: typeof p.PlasmicImg;
  dateSubLabel: "div";
  priceSubLabel: "div";
  overlay: "div";
  button: typeof Button;
  text: "div";
  descriptionBox: "div";
  h2: "h2";
  eventLocation: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEventCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEventCard__VariantsArgs;
    args?: PlasmicEventCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEventCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEventCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicEventCard__ArgProps,
          internalVariantPropNames: PlasmicEventCard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicEventCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "wrapper") {
    func.displayName = "PlasmicEventCard";
  } else {
    func.displayName = `PlasmicEventCard.${nodeName}`;
  }
  return func;
}

export const PlasmicEventCard = Object.assign(
  // Top-level PlasmicEventCard renders the root element
  makeNodeComponent("wrapper"),
  {
    // Helper components rendering sub-elements
    linkWrapper: makeNodeComponent("linkWrapper"),
    header: makeNodeComponent("header"),
    imageLayers: makeNodeComponent("imageLayers"),
    img: makeNodeComponent("img"),
    dateSubLabel: makeNodeComponent("dateSubLabel"),
    priceSubLabel: makeNodeComponent("priceSubLabel"),
    overlay: makeNodeComponent("overlay"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),
    descriptionBox: makeNodeComponent("descriptionBox"),
    h2: makeNodeComponent("h2"),
    eventLocation: makeNodeComponent("eventLocation"),

    // Metadata about props expected for PlasmicEventCard
    internalVariantProps: PlasmicEventCard__VariantProps,
    internalArgProps: PlasmicEventCard__ArgProps
  }
);

export default PlasmicEventCard;
/* prettier-ignore-end */
