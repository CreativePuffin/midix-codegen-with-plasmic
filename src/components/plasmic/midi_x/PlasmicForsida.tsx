// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kJshciSJnYYFfXZkFQ39on
// Component: v3lLZq-QeI
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: W4rdttX1TF/component
import Slider from "react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent
import EventCard from "../../EventCard"; // plasmic-import: AyrTywh7_c/component
import Button from "../../Button"; // plasmic-import: t_0Z-tS1oOM/component
import { GraphqlFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: 0DrxdjD45dkx/codeComponent
import Footer from "../../Footer"; // plasmic-import: _fa5mVL2su/component

import { useScreenVariants as useScreenVariantsq351NNxhIiU } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Q35_1NNxh_IiU/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_midi_x.module.css"; // plasmic-import: kJshciSJnYYFfXZkFQ39on/projectcss
import sty from "./PlasmicForsida.module.css"; // plasmic-import: v3lLZq-QeI/css

import TicketSvgrepoComsvgIcon from "./icons/PlasmicIcon__TicketSvgrepoComsvg"; // plasmic-import: Rtg_kZ7nG9/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: i36Dxs6GrK/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: LPwNS5ZgtbG/icon
import PopcornMovieSvgrepoComsvgIcon from "./icons/PlasmicIcon__PopcornMovieSvgrepoComsvg"; // plasmic-import: NmwHWg7pBE/icon
import image4GpdXmTtWf from "./images/image4.png"; // plasmic-import: gpdXmTtWf/picture
import image6NkXg4SbQr from "./images/image6.png"; // plasmic-import: NKXg4SBQr/picture
import image8AeGTr3LEa from "./images/image8.png"; // plasmic-import: AeGTr3LEa/picture

export type PlasmicForsida__VariantMembers = {};
export type PlasmicForsida__VariantsArgs = {};
type VariantPropType = keyof PlasmicForsida__VariantsArgs;
export const PlasmicForsida__VariantProps = new Array<VariantPropType>();

export type PlasmicForsida__ArgsType = {};
type ArgPropType = keyof PlasmicForsida__ArgsType;
export const PlasmicForsida__ArgProps = new Array<ArgPropType>();

export type PlasmicForsida__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  slider?: p.Flex<typeof Slider>;
  button?: p.Flex<typeof Button>;
  monthOfEventSubLabel?: p.Flex<"div">;
  monthOfEventSubLabel2?: p.Flex<"div">;
  monthOfEventSubLabel3?: p.Flex<"div">;
  monthOfEventSubLabel4?: p.Flex<"div">;
  monthOfEventSubLabel5?: p.Flex<"div">;
  graphQlFetcher?: p.Flex<typeof GraphqlFetcher>;
  monthOfEventSubLabel6?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultForsidaProps {
  className?: string;
}

function PlasmicForsida__RenderFunc(props: {
  variants: PlasmicForsida__VariantsArgs;
  args: PlasmicForsida__ArgsType;
  overrides: PlasmicForsida__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsq351NNxhIiU()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          {true ? (
            <p.Stack
              as={"section"}
              hasGap={true}
              className={classNames(projectcss.all, sty.section__w3Nvt)}
            />
          ) : null}
          {true ? (
            <p.Stack
              as={"section"}
              hasGap={true}
              className={classNames(projectcss.all, sty.section___6Zzw2)}
            >
              <Slider
                data-plasmic-name={"slider"}
                data-plasmic-override={overrides.slider}
                autoplay={true}
                className={classNames("__wab_instance", sty.slider)}
                dots={true}
              >
                <EventCard
                  className={classNames("__wab_instance", sty.eventCard__ydY5A)}
                  image={{
                    src: image4GpdXmTtWf,
                    fullWidth: 3200,
                    fullHeight: 1000,
                    aspectRatio: undefined
                  }}
                  link={`/events/event`}
                  priceLabel={"11.000 kr."}
                  size={["stretch"]}
                />

                <EventCard
                  className={classNames("__wab_instance", sty.eventCard__fb2Km)}
                  link={`/events/event`}
                  size={["stretch"]}
                />
              </Slider>
            </p.Stack>
          ) : null}

          <p.Stack
            as={"section"}
            hasGap={true}
            className={classNames(projectcss.all, sty.section__xI)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__o5E3M)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lzGcF)}
                  >
                    <TicketSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg___5VjoK)}
                      role={"img"}
                    />
                  </div>
                ) : null}

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ewruh
                  )}
                >
                  {"Viðburðir á næstunni"}
                </div>

                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={"whitePop" as const}
                  shape={"rounded" as const}
                  showEndIcon={true}
                  startIcon={
                    <Icon6Icon
                      className={classNames(projectcss.all, sty.svg__kkgqv)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fMisj
                    )}
                  >
                    {"Dagur"}
                  </div>
                </Button>
              </p.Stack>
            ) : null}

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___6DJxO)}
            >
              <EventCard
                className={classNames("__wab_instance", sty.eventCard___8YMv4)}
                dayOfEventSubLabel={"25"}
                eventTitle={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ftXzT
                    )}
                  >
                    {"Níu líf - Leikhússýning"}
                  </div>
                }
                image={{
                  src: image6NkXg4SbQr,
                  fullWidth: 776,
                  fullHeight: 600,
                  aspectRatio: undefined
                }}
                link={`/events/event`}
                monthOfEventSubLabel={
                  <div
                    data-plasmic-name={"monthOfEventSubLabel"}
                    data-plasmic-override={overrides.monthOfEventSubLabel}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.monthOfEventSubLabel
                    )}
                  >
                    {"Nov"}
                  </div>
                }
                showHeader={true}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__l8Zg
                    )}
                  >
                    {"Föstudagur kl: 14:00"}
                  </div>
                }
              >
                {"Borgarleikhúsið - Reykjavík"}
              </EventCard>

              <EventCard
                className={classNames("__wab_instance", sty.eventCard___55F0)}
                eventTitle={"Eyþór Ingi - Hátíðartónleikar "}
                link={`/events/event`}
                showHeader={true}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gqqiw
                    )}
                  >
                    {"Þriðjudagur kl: 18:00"}
                  </div>
                }
              >
                {"Borgarnes"}
              </EventCard>

              <EventCard
                className={classNames("__wab_instance", sty.eventCard__tgmSx)}
                dayOfEventSubLabel={"11"}
                eventTitle={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__awGl4
                    )}
                  >
                    {"Jóhanna Guðrún - Jólatónleikar"}
                  </div>
                }
                image={{
                  src: image4GpdXmTtWf,
                  fullWidth: 3200,
                  fullHeight: 1000,
                  aspectRatio: undefined
                }}
                link={`/events/event`}
                priceLabel={"11.000 kr."}
                showHeader={true}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tYmuD
                    )}
                  >
                    {"Föstudagur kl 20:00"}
                  </div>
                }
              />

              <EventCard
                className={classNames("__wab_instance", sty.eventCard___29Fei)}
                link={`/events/event`}
                showHeader={true}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nLt7F
                    )}
                  >
                    {"Þriðjudagur"}
                  </div>
                }
              />
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            hasGap={true}
            className={classNames(projectcss.all, sty.section__kRtgk)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xInL7)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__x26X)}
                  >
                    <PopcornMovieSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg___7RYjy)}
                      role={"img"}
                    />
                  </div>
                ) : null}

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1QbHo
                  )}
                >
                  {"Sýningar"}
                </div>
              </p.Stack>
            ) : null}

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ri0Ii)}
            >
              <EventCard
                className={classNames("__wab_instance", sty.eventCard__ay0F0)}
                eventTitle={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__n2GaH
                    )}
                  >
                    {"Grænar lausnir - Sölu og þjónustusýning"}
                  </div>
                }
                image={{
                  src: image8AeGTr3LEa,
                  fullWidth: 284,
                  fullHeight: 199,
                  aspectRatio: undefined
                }}
                link={`/events/event`}
                monthOfEventSubLabel={
                  <div
                    data-plasmic-name={"monthOfEventSubLabel2"}
                    data-plasmic-override={overrides.monthOfEventSubLabel2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.monthOfEventSubLabel2
                    )}
                  >
                    {"Des"}
                  </div>
                }
                showHeader={true}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ey3GX
                    )}
                  >
                    {"Þriðjudagur kl: 14:00"}
                  </div>
                }
              >
                {"Laugardalshöll - Reykjavík"}
              </EventCard>

              <EventCard
                className={classNames("__wab_instance", sty.eventCard__bc3UQ)}
                eventTitle={"Eyþór Ingi - Hátíðartónleikar "}
                link={`/events/event`}
                monthOfEventSubLabel={
                  <div
                    data-plasmic-name={"monthOfEventSubLabel3"}
                    data-plasmic-override={overrides.monthOfEventSubLabel3}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.monthOfEventSubLabel3
                    )}
                  >
                    {"Des"}
                  </div>
                }
                showHeader={true}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2Xbc
                    )}
                  >
                    {"Þriðjudagur kl: 18:00"}
                  </div>
                }
              >
                {"Borgarnes"}
              </EventCard>

              <EventCard
                className={classNames("__wab_instance", sty.eventCard__zmR5F)}
                dayOfEventSubLabel={"11"}
                eventTitle={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2ClR
                    )}
                  >
                    {"Jóhanna Guðrún - Jólatónleikar"}
                  </div>
                }
                image={{
                  src: image4GpdXmTtWf,
                  fullWidth: 3200,
                  fullHeight: 1000,
                  aspectRatio: undefined
                }}
                link={`/events/event`}
                monthOfEventSubLabel={
                  <div
                    data-plasmic-name={"monthOfEventSubLabel4"}
                    data-plasmic-override={overrides.monthOfEventSubLabel4}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.monthOfEventSubLabel4
                    )}
                  >
                    {"Des"}
                  </div>
                }
                priceLabel={"11.000 kr."}
                showHeader={true}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mNaPb
                    )}
                  >
                    {"Föstudagur kl 20:00"}
                  </div>
                }
              />

              <EventCard
                className={classNames("__wab_instance", sty.eventCard__mCjJx)}
                link={`/events/event`}
                monthOfEventSubLabel={
                  <div
                    data-plasmic-name={"monthOfEventSubLabel5"}
                    data-plasmic-override={overrides.monthOfEventSubLabel5}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.monthOfEventSubLabel5
                    )}
                  >
                    {"Des"}
                  </div>
                }
                showHeader={true}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5Styr
                    )}
                  >
                    {"Þriðjudagur"}
                  </div>
                }
              />
            </p.Stack>
          </p.Stack>

          {true ? (
            <p.Stack
              as={"section"}
              hasGap={true}
              className={classNames(projectcss.all, sty.section__bnHau)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ijRk)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vNIek)}
                    >
                      <PopcornMovieSvgrepoComsvgIcon
                        className={classNames(projectcss.all, sty.svg__g7UnM)}
                        role={"img"}
                      />
                    </div>
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aRjNn
                    )}
                  >
                    {"Sýningar"}
                  </div>
                </p.Stack>
              ) : null}

              <GraphqlFetcher
                data-plasmic-name={"graphQlFetcher"}
                data-plasmic-override={overrides.graphQlFetcher}
                className={classNames("__wab_instance", sty.graphQlFetcher)}
                dataName={"fetchedData" as const}
                errorDisplay={
                  <ph.DataCtxReader>
                    {$ctx => "Error fetching data"}
                  </ph.DataCtxReader>
                }
                headers={{
                  "Content-Type": "application/json",
                  Accept: "application/json",
                  Authorization:
                    "Bearer fnAE1b5sTSAAzDHXytywxlq9YW659yL9N9lLA35I"
                }}
                loadingDisplay={
                  <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
                }
                method={"POST" as const}
                noLayout={false}
                query={{
                  query:
                    "{\n  characters {\n    results {\n      name\n      species\n      image\n    }\n  }\n}\n"
                }}
                url={"https://graphql.eu.fauna.com/graphql" as const}
              >
                <ph.DataCtxReader>
                  {$ctx => (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__jupik)}
                    >
                      {([2, 3, 4] ?? []).map((currentItem, currentIndex) => (
                        <EventCard
                          className={classNames(
                            "__wab_instance",
                            sty.eventCard___2YXaR
                          )}
                          eventTitle={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__e3BkA
                              )}
                            >
                              {"Grænar lausnir - Sölu og þjónustusýning"}
                            </div>
                          }
                          image={{
                            src: image8AeGTr3LEa,
                            fullWidth: 284,
                            fullHeight: 199,
                            aspectRatio: undefined
                          }}
                          key={currentIndex}
                          link={`/events/event`}
                          monthOfEventSubLabel={
                            <div
                              data-plasmic-name={"monthOfEventSubLabel6"}
                              data-plasmic-override={
                                overrides.monthOfEventSubLabel6
                              }
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.monthOfEventSubLabel6
                              )}
                            >
                              {"Des"}
                            </div>
                          }
                          showHeader={true}
                          slot={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mSV
                              )}
                            >
                              {"Þriðjudagur kl: 14:00"}
                            </div>
                          }
                        >
                          {"Laugardalshöll - Reykjavík"}
                        </EventCard>
                      ))}
                    </p.Stack>
                  )}
                </ph.DataCtxReader>
              </GraphqlFetcher>
            </p.Stack>
          ) : null}

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "slider",
    "button",
    "monthOfEventSubLabel",
    "monthOfEventSubLabel2",
    "monthOfEventSubLabel3",
    "monthOfEventSubLabel4",
    "monthOfEventSubLabel5",
    "graphQlFetcher",
    "monthOfEventSubLabel6",
    "footer"
  ],
  navbar: ["navbar"],
  slider: ["slider"],
  button: ["button"],
  monthOfEventSubLabel: ["monthOfEventSubLabel"],
  monthOfEventSubLabel2: ["monthOfEventSubLabel2"],
  monthOfEventSubLabel3: ["monthOfEventSubLabel3"],
  monthOfEventSubLabel4: ["monthOfEventSubLabel4"],
  monthOfEventSubLabel5: ["monthOfEventSubLabel5"],
  graphQlFetcher: ["graphQlFetcher", "monthOfEventSubLabel6"],
  monthOfEventSubLabel6: ["monthOfEventSubLabel6"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  slider: typeof Slider;
  button: typeof Button;
  monthOfEventSubLabel: "div";
  monthOfEventSubLabel2: "div";
  monthOfEventSubLabel3: "div";
  monthOfEventSubLabel4: "div";
  monthOfEventSubLabel5: "div";
  graphQlFetcher: typeof GraphqlFetcher;
  monthOfEventSubLabel6: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicForsida__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicForsida__VariantsArgs;
    args?: PlasmicForsida__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicForsida__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicForsida__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicForsida__ArgProps,
          internalVariantPropNames: PlasmicForsida__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicForsida__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicForsida";
  } else {
    func.displayName = `PlasmicForsida.${nodeName}`;
  }
  return func;
}

export const PlasmicForsida = Object.assign(
  // Top-level PlasmicForsida renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    slider: makeNodeComponent("slider"),
    button: makeNodeComponent("button"),
    monthOfEventSubLabel: makeNodeComponent("monthOfEventSubLabel"),
    monthOfEventSubLabel2: makeNodeComponent("monthOfEventSubLabel2"),
    monthOfEventSubLabel3: makeNodeComponent("monthOfEventSubLabel3"),
    monthOfEventSubLabel4: makeNodeComponent("monthOfEventSubLabel4"),
    monthOfEventSubLabel5: makeNodeComponent("monthOfEventSubLabel5"),
    graphQlFetcher: makeNodeComponent("graphQlFetcher"),
    monthOfEventSubLabel6: makeNodeComponent("monthOfEventSubLabel6"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicForsida
    internalVariantProps: PlasmicForsida__VariantProps,
    internalArgProps: PlasmicForsida__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicForsida;
/* prettier-ignore-end */
