// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kJshciSJnYYFfXZkFQ39on
// Component: QAldq9KY4Yp
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: W4rdttX1TF/component
import Button from "../../Button"; // plasmic-import: t_0Z-tS1oOM/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_midi_x.module.css"; // plasmic-import: kJshciSJnYYFfXZkFQ39on/projectcss
import sty from "./PlasmicEventsslug2.module.css"; // plasmic-import: QAldq9KY4Yp/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: r5cn7eC_vQ/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: LPwNS5ZgtbG/icon
import image3CbJJejSc8 from "./images/image3.png"; // plasmic-import: cbJJejSc8/picture

export type PlasmicEventsslug2__VariantMembers = {};
export type PlasmicEventsslug2__VariantsArgs = {};
type VariantPropType = keyof PlasmicEventsslug2__VariantsArgs;
export const PlasmicEventsslug2__VariantProps = new Array<VariantPropType>();

export type PlasmicEventsslug2__ArgsType = {
  dayOfEventSubLabel?: React.ReactNode;
  monthOfEventSubLabel?: React.ReactNode;
  eventTitle?: React.ReactNode;
};
type ArgPropType = keyof PlasmicEventsslug2__ArgsType;
export const PlasmicEventsslug2__ArgProps = new Array<ArgPropType>(
  "dayOfEventSubLabel",
  "monthOfEventSubLabel",
  "eventTitle"
);

export type PlasmicEventsslug2__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  imageLayers?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  dateSubLabel?: p.Flex<"div">;
  descriptionBox?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  button?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
};

export interface DefaultEventsslug2Props {
  dayOfEventSubLabel?: React.ReactNode;
  monthOfEventSubLabel?: React.ReactNode;
  eventTitle?: React.ReactNode;
  className?: string;
}

function PlasmicEventsslug2__RenderFunc(props: {
  variants: PlasmicEventsslug2__VariantsArgs;
  args: PlasmicEventsslug2__ArgsType;
  overrides: PlasmicEventsslug2__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__jtnnk)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__bdiIl)}>
              <div
                data-plasmic-name={"imageLayers"}
                data-plasmic-override={overrides.imageLayers}
                className={classNames(projectcss.all, sty.imageLayers)}
              >
                <p.PlasmicImg
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: image3CbJJejSc8,
                    fullWidth: 1170,
                    fullHeight: 475,
                    aspectRatio: undefined
                  }}
                />

                {true ? (
                  <div
                    data-plasmic-name={"dateSubLabel"}
                    data-plasmic-override={overrides.dateSubLabel}
                    className={classNames(projectcss.all, sty.dateSubLabel)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__aPprV)}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: "01 ",
                        value: args.dayOfEventSubLabel,
                        className: classNames(sty.slotTargetDayOfEventSubLabel)
                      })}
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__uiqN0)}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__swB1Y
                            )}
                          >
                            {"Des"}
                          </div>
                        ),

                        value: args.monthOfEventSubLabel,
                        className: classNames(
                          sty.slotTargetMonthOfEventSubLabel
                        )
                      })}
                    </div>
                  </div>
                ) : null}
              </div>

              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"descriptionBox"}
                  data-plasmic-override={overrides.descriptionBox}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.descriptionBox)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__sg7Xd)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cRqIe
                        )}
                      >
                        <h2
                          data-plasmic-name={"h2"}
                          data-plasmic-override={overrides.h2}
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            sty.h2
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "Eyþór Ingi - Hátíðartónleikar",
                            value: args.eventTitle,
                            className: classNames(sty.slotTargetEventTitle)
                          })}
                        </h2>
                      </div>
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xqIav
                      )}
                    >
                      {
                        "Hátíðartónleikar Eyþórs hafa fengið frábærar viðtökur um land allt síðustu ár. \n\nHér er á ferðinni létt og jólaleg kvöldstund þar sem Eyþór Ingi kemur fram með húmorinn  píanóið og gítarinn að vopni ásamt piano snillingnum og hæfileikasprengjuni Þórði Sigurðarsyni.\n\nHátíðartónleikar Eyþórs Inga einkennast af einstakri blöndu hugljúfra tóna,  gríni og jafnvel eftirhermum. Það er klárt mál að ADHD hefur aldrei verið skemmtilegra.\n\nSíðast seldist upp hratt og færri komust að en vildu."
                      }
                    </div>
                  </div>

                  <div className={classNames(projectcss.all, sty.column__vlDm)}>
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rNpjF
                        )}
                      >
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___5ZqW0
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__n8LYl
                              )}
                            >
                              {"frá 5.000 kr."}
                            </div>

                            <Button
                              data-plasmic-name={"button"}
                              data-plasmic-override={overrides.button}
                              className={classNames(
                                "__wab_instance",
                                sty.button
                              )}
                              color={"green" as const}
                              showStartIcon={true}
                              startIcon={
                                <Icon2Icon
                                  data-plasmic-name={"svg"}
                                  data-plasmic-override={overrides.svg}
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg
                                  )}
                                  role={"img"}
                                />
                              }
                            >
                              {"Kaupa miða"}
                            </Button>
                          </p.Stack>
                        ) : null}
                      </p.Stack>
                    ) : null}
                  </div>
                </p.Stack>
              ) : null}
            </div>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "imageLayers",
    "img",
    "dateSubLabel",
    "descriptionBox",
    "h2",
    "button",
    "svg"
  ],
  navbar: ["navbar"],
  imageLayers: ["imageLayers", "img", "dateSubLabel"],
  img: ["img"],
  dateSubLabel: ["dateSubLabel"],
  descriptionBox: ["descriptionBox", "h2", "button", "svg"],
  h2: ["h2"],
  button: ["button", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  imageLayers: "div";
  img: typeof p.PlasmicImg;
  dateSubLabel: "div";
  descriptionBox: "div";
  h2: "h2";
  button: typeof Button;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEventsslug2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEventsslug2__VariantsArgs;
    args?: PlasmicEventsslug2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEventsslug2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEventsslug2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicEventsslug2__ArgProps,
          internalVariantPropNames: PlasmicEventsslug2__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicEventsslug2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEventsslug2";
  } else {
    func.displayName = `PlasmicEventsslug2.${nodeName}`;
  }
  return func;
}

export const PlasmicEventsslug2 = Object.assign(
  // Top-level PlasmicEventsslug2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    imageLayers: makeNodeComponent("imageLayers"),
    img: makeNodeComponent("img"),
    dateSubLabel: makeNodeComponent("dateSubLabel"),
    descriptionBox: makeNodeComponent("descriptionBox"),
    h2: makeNodeComponent("h2"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicEventsslug2
    internalVariantProps: PlasmicEventsslug2__VariantProps,
    internalArgProps: PlasmicEventsslug2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEventsslug2;
/* prettier-ignore-end */
