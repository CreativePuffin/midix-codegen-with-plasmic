// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kJshciSJnYYFfXZkFQ39on
// Component: aY8ZIa1KnE
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: ohS2mnvFyx/component
import StepLabel from "../../StepLabel"; // plasmic-import: L6wHNgu9QA/component
import Button from "../../Button"; // plasmic-import: t_0Z-tS1oOM/component
import Select from "../../Select"; // plasmic-import: mKhxhGuxUJn/component
import Select__Option from "../../Select__Option"; // plasmic-import: yX83gCulZxH/component

import { useScreenVariants as useScreenVariantsq351NNxhIiU } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Q35_1NNxh_IiU/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_midi_x.module.css"; // plasmic-import: kJshciSJnYYFfXZkFQ39on/projectcss
import sty from "./PlasmicBuyTicket.module.css"; // plasmic-import: aY8ZIa1KnE/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: a4AtesqE6S/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: r5cn7eC_vQ/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: LPwNS5ZgtbG/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: Oq_IxxqAcw/icon

export type PlasmicBuyTicket__VariantMembers = {};
export type PlasmicBuyTicket__VariantsArgs = {};
type VariantPropType = keyof PlasmicBuyTicket__VariantsArgs;
export const PlasmicBuyTicket__VariantProps = new Array<VariantPropType>();

export type PlasmicBuyTicket__ArgsType = {
  children3?: React.ReactNode;
  children4?: React.ReactNode;
  children5?: React.ReactNode;
  children6?: React.ReactNode;
  eventTitle?: React.ReactNode;
  eventTitle4?: React.ReactNode;
  eventTitle5?: React.ReactNode;
  eventTitle6?: React.ReactNode;
  eventTitle7?: React.ReactNode;
  children7?: React.ReactNode;
  children8?: React.ReactNode;
  children9?: React.ReactNode;
  children10?: React.ReactNode;
};
type ArgPropType = keyof PlasmicBuyTicket__ArgsType;
export const PlasmicBuyTicket__ArgProps = new Array<ArgPropType>(
  "children3",
  "children4",
  "children5",
  "children6",
  "eventTitle",
  "eventTitle4",
  "eventTitle5",
  "eventTitle6",
  "eventTitle7",
  "children7",
  "children8",
  "children9",
  "children10"
);

export type PlasmicBuyTicket__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  h2?: p.Flex<"h2">;
  eventDate2?: p.Flex<"div">;
  eventLocation3?: p.Flex<"div">;
  select?: p.Flex<typeof Select>;
  eventDate5?: p.Flex<"div">;
  eventLocation6?: p.Flex<"div">;
  eventDate3?: p.Flex<"div">;
  eventLocation4?: p.Flex<"div">;
  eventDate4?: p.Flex<"div">;
  eventLocation5?: p.Flex<"div">;
};

export interface DefaultBuyTicketProps {
  children3?: React.ReactNode;
  children4?: React.ReactNode;
  children5?: React.ReactNode;
  children6?: React.ReactNode;
  eventTitle?: React.ReactNode;
  eventTitle4?: React.ReactNode;
  eventTitle5?: React.ReactNode;
  eventTitle6?: React.ReactNode;
  eventTitle7?: React.ReactNode;
  children7?: React.ReactNode;
  children8?: React.ReactNode;
  children9?: React.ReactNode;
  children10?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    await promise;
  });

function PlasmicBuyTicket__RenderFunc(props: {
  variants: PlasmicBuyTicket__VariantsArgs;
  args: PlasmicBuyTicket__ArgsType;
  overrides: PlasmicBuyTicket__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsq351NNxhIiU()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gLwnf)}
            >
              {true ? (
                <StepLabel
                  className={classNames(
                    "__wab_instance",
                    sty.stepLabel___9TMpF
                  )}
                  eventTitle4={p.renderPlasmicSlot({
                    defaultContents: "Velja miða",
                    value: args.eventTitle4,
                    className: classNames(sty.slotTargetEventTitle4)
                  })}
                  eventTitle5={p.renderPlasmicSlot({
                    defaultContents: "1",
                    value: args.eventTitle5
                  })}
                  selected={true}
                />
              ) : null}

              <div
                className={classNames(projectcss.all, sty.freeBox___5Yaby)}
              />

              {true ? (
                <StepLabel
                  className={classNames("__wab_instance", sty.stepLabel__r7Rsr)}
                  eventTitle4={p.renderPlasmicSlot({
                    defaultContents: "Greiðsla",
                    value: args.eventTitle7
                  })}
                  eventTitle5={p.renderPlasmicSlot({
                    defaultContents: "2",
                    value: args.eventTitle6
                  })}
                />
              ) : null}
            </p.Stack>
          ) : null}
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__zMwzu)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__y7MyW)}>
                  <h2
                    data-plasmic-name={"h2"}
                    data-plasmic-override={overrides.h2}
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      sty.h2
                    )}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "Eyþór Ingi - Hátíðartónleikar",
                      value: args.eventTitle,
                      className: classNames(sty.slotTargetEventTitle)
                    })}
                  </h2>
                </div>
              ) : null}
            </div>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__tzi5E)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___27Imi)}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__t7FFd)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kjTe
                          )}
                        >
                          <div
                            data-plasmic-name={"eventDate2"}
                            data-plasmic-override={overrides.eventDate2}
                            className={classNames(
                              projectcss.all,
                              sty.eventDate2
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__fzKkL
                                  )}
                                >
                                  {"Laugardagur, 3.desember"}
                                </div>
                              ),

                              value: args.children3,
                              className: classNames(sty.slotTargetChildren3)
                            })}
                          </div>
                        </p.Stack>
                      ) : null}
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ggume
                          )}
                        >
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___3GXj5
                            )}
                            role={"img"}
                          />

                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"eventLocation3"}
                            data-plasmic-override={overrides.eventLocation3}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.eventLocation3
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: (
                                <React.Fragment>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__mjokZ
                                    )}
                                  >
                                    {"Höllin, Selfoss"}
                                  </div>

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__igKiU
                                    )}
                                  >
                                    {"kl: 20:00"}
                                  </div>
                                </React.Fragment>
                              ),
                              value: args.children4,
                              className: classNames(sty.slotTargetChildren4)
                            })}
                          </p.Stack>
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  ) : null}
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__nVgQf)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6DjOy
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__gIwgc
                          )}
                          color={"whitePop" as const}
                          startIcon={
                            <Icon2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__canpo
                              )}
                              role={"img"}
                            />
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jhyno
                            )}
                          >
                            {"-"}
                          </div>
                        </Button>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ehEc5
                          )}
                        >
                          {"1"}
                        </div>

                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__s5E51
                          )}
                          color={"whitePop" as const}
                          startIcon={
                            <Icon2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hvaTy
                              )}
                              role={"img"}
                            />
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rSTh8
                            )}
                          >
                            {"+"}
                          </div>
                        </Button>
                      </div>

                      <Select
                        data-plasmic-name={"select"}
                        data-plasmic-override={overrides.select}
                        className={classNames("__wab_instance", sty.select)}
                        defaultValue={"" as const}
                        placeholder={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6Lnv6
                            )}
                          >
                            {"A svæði - 5.000 kr."}
                          </div>
                        }
                      >
                        <Select__Option
                          className={classNames(
                            "__wab_instance",
                            sty.option__o146O
                          )}
                          textValue={"B svæði - 7.000 kr." as const}
                          value={"value1" as const}
                        >
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__f1ORb
                              )}
                            >
                              {"Option 1"}
                            </div>
                          ) : null}
                        </Select__Option>

                        <Select__Option
                          className={classNames(
                            "__wab_instance",
                            sty.option__ny3BH
                          )}
                          textValue={"C Svæði - 8.000 kr." as const}
                          value={"value2" as const}
                        >
                          {"Option 2"}
                        </Select__Option>
                      </Select>
                    </p.Stack>
                  ) : null}
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__b0FXy)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___2Rl0W
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__btYM
                            )}
                          >
                            {"5.000 kr."}
                          </div>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button___6Gk5C
                            )}
                            color={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("softBlue" as const)
                                : ("blue" as const)
                            }
                            showStartIcon={true}
                            startIcon={
                              <Icon2Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__tAzGt
                                )}
                                role={"img"}
                              />
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qR5K
                              )}
                            >
                              {"Bæta við"}
                            </div>
                          </Button>
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  ) : null}
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___6Gh)}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5RMxu
                      )}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zbUuy
                          )}
                        >
                          <div
                            data-plasmic-name={"eventDate5"}
                            data-plasmic-override={overrides.eventDate5}
                            className={classNames(
                              projectcss.all,
                              sty.eventDate5
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__glhDy
                                  )}
                                >
                                  {"Fimmtudagur, 1.desember"}
                                </div>
                              ),

                              value: args.children9,
                              className: classNames(sty.slotTargetChildren9)
                            })}
                          </div>
                        </p.Stack>
                      ) : null}
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__aByCb
                          )}
                        >
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__t8P5
                            )}
                            role={"img"}
                          />

                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"eventLocation6"}
                            data-plasmic-override={overrides.eventLocation6}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.eventLocation6
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: (
                                <React.Fragment>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___42Flr
                                    )}
                                  >
                                    {"Höllin, Borgarnes"}
                                  </div>

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__fbtj4
                                    )}
                                  >
                                    {"kl: 20:00"}
                                  </div>
                                </React.Fragment>
                              ),
                              value: args.children10,
                              className: classNames(sty.slotTargetChildren10)
                            })}
                          </p.Stack>
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  ) : null}
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nMsPi)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___38Eqn
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__xp1Og
                          )}
                          color={"whitePop" as const}
                          startIcon={
                            <Icon2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__mp6GQ
                              )}
                              role={"img"}
                            />
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___1GDn
                            )}
                          >
                            {"-"}
                          </div>
                        </Button>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__s9Wjr
                          )}
                        >
                          {"0"}
                        </div>

                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__t49S0
                          )}
                          color={"whitePop" as const}
                          startIcon={
                            <Icon2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__yXne
                              )}
                              role={"img"}
                            />
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tkXig
                            )}
                          >
                            {"+"}
                          </div>
                        </Button>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fuBVh
                        )}
                      >
                        {"Aðeins 1 miði eftir"}
                      </div>
                    </div>
                  ) : null}
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__mfLHm)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lvVp
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tY18R
                            )}
                          >
                            {"5.000 kr."}
                          </div>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__oIpt8
                            )}
                            color={"blue" as const}
                            showStartIcon={true}
                            startIcon={
                              <Icon2Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__fifam
                                )}
                                role={"img"}
                              />
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dNyIy
                              )}
                            >
                              {"Bæta við"}
                            </div>
                          </Button>
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  ) : null}
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pmBg3)}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__a3ULd)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__geUaf
                          )}
                        >
                          <div
                            data-plasmic-name={"eventDate3"}
                            data-plasmic-override={overrides.eventDate3}
                            className={classNames(
                              projectcss.all,
                              sty.eventDate3
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__oJpSl
                                  )}
                                >
                                  {"Föstudagur, 2.desember"}
                                </div>
                              ),

                              value: args.children5,
                              className: classNames(sty.slotTargetChildren5)
                            })}
                          </div>
                        </p.Stack>
                      ) : null}
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0Ei
                          )}
                        >
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__xXvU
                            )}
                            role={"img"}
                          />

                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"eventLocation4"}
                            data-plasmic-override={overrides.eventLocation4}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.eventLocation4
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: (
                                <React.Fragment>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___1TeXv
                                    )}
                                  >
                                    {"Harpa, Reykjavík"}
                                  </div>

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___9MW9Q
                                    )}
                                  >
                                    {"kl: 20:00"}
                                  </div>
                                </React.Fragment>
                              ),
                              value: args.children6,
                              className: classNames(sty.slotTargetChildren6)
                            })}
                          </p.Stack>
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  ) : null}
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__vJ84O)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xAjA3
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8Ssfr
                            )}
                          >
                            {"5.000 - 8.000 kr."}
                          </div>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__zx0Vl
                            )}
                            color={"blue" as const}
                            showEndIcon={true}
                            startIcon={
                              <Icon2Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ycdef
                                )}
                                role={"img"}
                              />
                            }
                          >
                            {"Velja sæti"}
                          </Button>
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  ) : null}
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__il0Ol)}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__jja5T)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___7YNxG
                          )}
                        >
                          <div
                            data-plasmic-name={"eventDate4"}
                            data-plasmic-override={overrides.eventDate4}
                            className={classNames(
                              projectcss.all,
                              sty.eventDate4
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__mdg7L
                                  )}
                                >
                                  {"Fimmtudagur, 1.desember"}
                                </div>
                              ),

                              value: args.children7,
                              className: classNames(sty.slotTargetChildren7)
                            })}
                          </div>
                        </p.Stack>
                      ) : null}
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__z1Xd4
                          )}
                        >
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__hk1QG
                            )}
                            role={"img"}
                          />

                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"eventLocation5"}
                            data-plasmic-override={overrides.eventLocation5}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.eventLocation5
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: (
                                <React.Fragment>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__wo4Gh
                                    )}
                                  >
                                    {"Höllin, Borgarnes"}
                                  </div>

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__gtTCp
                                    )}
                                  >
                                    {"kl: 13:00"}
                                  </div>
                                </React.Fragment>
                              ),
                              value: args.children8,
                              className: classNames(sty.slotTargetChildren8)
                            })}
                          </p.Stack>
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  ) : null}
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gw54N)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qgE07
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__tvw0N
                          )}
                          color={"whitePop" as const}
                          isDisabled={true}
                          startIcon={
                            <Icon2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__rBgb
                              )}
                              role={"img"}
                            />
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jqMEe
                            )}
                          >
                            {"-"}
                          </div>
                        </Button>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9JIpH
                          )}
                        >
                          {"0"}
                        </div>

                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__l1M3
                          )}
                          color={"whitePop" as const}
                          isDisabled={true}
                          startIcon={
                            <Icon2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__dpWt3
                              )}
                              role={"img"}
                            />
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ic7E4
                            )}
                          >
                            {"+"}
                          </div>
                        </Button>
                      </div>
                    </div>
                  ) : null}
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__sen0A)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dphIc
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gqusa
                            )}
                          >
                            {"5.000 kr."}
                          </div>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__uN18D
                            )}
                            color={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("softBlue" as const)
                                : ("blue" as const)
                            }
                            isDisabled={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : true
                            }
                            startIcon={
                              <Icon16Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__lca73
                                )}
                                role={"img"}
                              />
                            }
                          >
                            {"Uppselt"}
                          </Button>
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  ) : null}
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hHQm1)}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox___85Fk)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___1AVtM)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5DMtd
                      )}
                    >
                      {"1"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fqxy
                      )}
                    >
                      {"x"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mtPSk
                      )}
                    >
                      {"miði"}
                    </div>
                  </p.Stack>
                ) : null}

                <div
                  className={classNames(projectcss.all, sty.freeBox__ici51)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tyDyS
                  )}
                >
                  {"5.000 kr."}
                </div>
              </div>
            ) : null}

            <Button
              className={classNames("__wab_instance", sty.button__lurm6)}
              color={"yellow" as const}
              showEndIcon={true}
              startIcon={
                <Icon2Icon
                  className={classNames(projectcss.all, sty.svg__zRueE)}
                  role={"img"}
                />
              }
            >
              {"Halda áfram"}
            </Button>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "h2",
    "eventDate2",
    "eventLocation3",
    "select",
    "eventDate5",
    "eventLocation6",
    "eventDate3",
    "eventLocation4",
    "eventDate4",
    "eventLocation5"
  ],
  header: ["header"],
  h2: ["h2"],
  eventDate2: ["eventDate2"],
  eventLocation3: ["eventLocation3"],
  select: ["select"],
  eventDate5: ["eventDate5"],
  eventLocation6: ["eventLocation6"],
  eventDate3: ["eventDate3"],
  eventLocation4: ["eventLocation4"],
  eventDate4: ["eventDate4"],
  eventLocation5: ["eventLocation5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  h2: "h2";
  eventDate2: "div";
  eventLocation3: "div";
  select: typeof Select;
  eventDate5: "div";
  eventLocation6: "div";
  eventDate3: "div";
  eventLocation4: "div";
  eventDate4: "div";
  eventLocation5: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBuyTicket__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBuyTicket__VariantsArgs;
    args?: PlasmicBuyTicket__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBuyTicket__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBuyTicket__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBuyTicket__ArgProps,
          internalVariantPropNames: PlasmicBuyTicket__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBuyTicket__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBuyTicket";
  } else {
    func.displayName = `PlasmicBuyTicket.${nodeName}`;
  }
  return func;
}

export const PlasmicBuyTicket = Object.assign(
  // Top-level PlasmicBuyTicket renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    h2: makeNodeComponent("h2"),
    eventDate2: makeNodeComponent("eventDate2"),
    eventLocation3: makeNodeComponent("eventLocation3"),
    select: makeNodeComponent("select"),
    eventDate5: makeNodeComponent("eventDate5"),
    eventLocation6: makeNodeComponent("eventLocation6"),
    eventDate3: makeNodeComponent("eventDate3"),
    eventLocation4: makeNodeComponent("eventLocation4"),
    eventDate4: makeNodeComponent("eventDate4"),
    eventLocation5: makeNodeComponent("eventLocation5"),

    // Metadata about props expected for PlasmicBuyTicket
    internalVariantProps: PlasmicBuyTicket__VariantProps,
    internalArgProps: PlasmicBuyTicket__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBuyTicket;
/* prettier-ignore-end */
